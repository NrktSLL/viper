#!/usr/bin/env python3
"""
VIPER - Exploit Scanner Script

This script scans CVEs in the database for public exploits, focusing on HIGH priority CVEs by default.
It's designed to be run periodically (e.g., via cron) to keep exploit data current.

Usage:
    python scan_exploits.py [--priority=high] [--max-cves=100] [--delay=2]

Arguments:
    --priority: Which priority level to scan (high, all). Defaults to 'high'
    --max-cves: Maximum number of CVEs to scan (default: all CVEs)
    --delay: Delay between API calls in seconds (default: 2s)
"""
import argparse
import asyncio
import logging
import os
import sys
import time
from datetime import datetime

# Add project root to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.main_mvp import enrich_cves_with_exploits, scan_all_cves_for_exploits
from src.utils.config import get_log_file_name, get_log_level
from src.utils.database_handler import get_all_cve_ids_from_db, get_high_priority_cves

# Configure logging
log_level = get_log_level()
log_file = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))),
    "logs",
    "exploit_scan.log",
)

logging.basicConfig(
    level=getattr(logging, log_level.upper(), logging.INFO),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


async def main():
    parser = argparse.ArgumentParser(description="Scan CVEs in the database for public exploits")
    parser.add_argument(
        "--priority",
        type=str,
        default="high",
        choices=["high", "all"],
        help="Which priority level to scan (high, all). Defaults to 'high'",
    )
    parser.add_argument("--max-cves", type=int, default=None, help="Maximum number of CVEs to scan (default: all CVEs)")
    parser.add_argument("--delay", type=int, default=2, help="Delay between API calls in seconds (default: 2s)")
    args = parser.parse_args()

    logger.info(f"Starting CVE exploit scan for {args.priority.upper()} priority CVEs")
    print(
        f"Starting CVE exploit scan for {args.priority.upper()} priority CVEs at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    start_time = time.time()

    if args.priority.lower() == "high":
        # Get only HIGH priority CVEs
        high_priority_cves = get_high_priority_cves()
        if not high_priority_cves:
            logger.info("No HIGH priority CVEs found to scan")
            print("No HIGH priority CVEs found to scan")
            return

        # Limit the number if max-cves is specified
        if args.max_cves and len(high_priority_cves) > args.max_cves:
            high_priority_cves = high_priority_cves[: args.max_cves]

        logger.info(f"Found {len(high_priority_cves)} HIGH priority CVEs to scan")
        print(f"Found {len(high_priority_cves)} HIGH priority CVEs to scan")

        # Search for exploits for high priority CVEs
        processed_count, found_count = await enrich_cves_with_exploits(high_priority_cves)
    else:
        # Scan all CVEs
        processed_count, found_count = await scan_all_cves_for_exploits(args.max_cves)

    elapsed_time = time.time() - start_time

    logger.info(f"Exploit scan completed in {elapsed_time:.2f} seconds")
    logger.info(f"Processed {processed_count} CVEs, found exploits for {found_count} CVEs")

    print(f"\nExploit scan completed in {elapsed_time:.2f} seconds")
    print(f"Processed {processed_count} CVEs, found exploits for {found_count} CVEs")


if __name__ == "__main__":
    asyncio.run(main())
